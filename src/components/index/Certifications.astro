---
import certifications from '../../data/certifications.js';
// SOLUCIÃ“N: Importamos el nuevo componente de icono
import IconArrow from '../icons/IconArrow.astro';

// Dividimos las certificaciones en pÃ¡ginas de 5
const CERTS_PER_PAGE = 5;
const totalPages = Math.ceil(certifications.length / CERTS_PER_PAGE);
const pages = Array.from({ length: totalPages }, (_, i) => 
  certifications.slice(i * CERTS_PER_PAGE, (i + 1) * CERTS_PER_PAGE)
);
---
<section id="certifications" class="section-spacing">
  <div class="max-w-5xl mx-auto px-8">
    
    <div class="flex justify-between items-center mb-6">
      <h2 class="section-title text-slate-900 dark:text-slate-100 mb-0">
        <span class="icon-emoji">ðŸ“œ</span>
        Certificaciones y Cursos
      </h2>
      
      <div class="certification-nav hidden sm:flex gap-2">
        <button id="scroll-left" aria-label="Desplazar a la izquierda" class="nav-button">â€¹</button>
        <button id="scroll-right" aria-label="Desplazar a la derecha" class="nav-button">â€º</button>
      </div>
    </div>
    
    <div id="certifications-slider" class="certifications-container">
      {pages.map((pageCerts, pageIndex) => (
        <div class="certification-page" data-page={pageIndex}>
          <ul class="certification-list">
            {pageCerts.map(cert => {
              const isValidUrl = cert.link && (cert.link.startsWith('http://') || cert.link.startsWith('https://'));
              const Tag = isValidUrl ? 'a' : 'div';
              const tagProps = isValidUrl ? {
                href: cert.link,
                target: "_blank",
                rel: "noopener noreferrer"
              } : {};

              return (
                <li class="certification-item">
                  <Tag 
                    class:list={["certification-link", { 'no-link': !isValidUrl }]}
                    {...tagProps}
                  >
                    <div class="certification-content">
                      <h3 class="certification-title">{cert.title}</h3>
                      <p class="certification-meta">{cert.issuer} â€¢ {cert.year}</p>
                      {!isValidUrl && cert.link && cert.link !== '#' && (
                        <p class="certification-id">ID de credencial: {cert.link}</p>
                      )}
                    </div>
                    
                    {/*
                      SOLUCIÃ“N:
                      Reemplazamos todo el bloque <svg> por el componente <IconArrow />.
                      Esto elimina el error del parser de TypeScript.
                    */}
                    {isValidUrl && <IconArrow />}
                  </Tag>
                </li>
              );
            })}
          </ul>
        </div>
      ))}
    </div>

    {totalPages > 1 && (
      <div class="flex justify-center gap-2 mt-4">
        {Array.from({ length: totalPages }).map((_, i) => (
          <button 
            class="page-indicator" 
            data-page-index={i}
            aria-label={`Ir a pÃ¡gina ${i + 1}`}
          />
        ))}
      </div>
    )}
  </div>
</section>

<script>
  import { initCertificationsSlider } from '../../scripts/certifications-slider';
  
  // Inicializar el slider cuando el DOM estÃ© listo
  initCertificationsSlider();
</script>

<style>
  .certification-id {
    @apply text-xs font-mono mt-1;
    @apply text-slate-500 dark:text-slate-400;
  }
  .certification-link.no-link {
    cursor: default;
  }
  .certification-link.no-link:hover {
    @apply border-slate-200 dark:border-slate-700 shadow-none !important;
  }
  .certification-link.no-link :global(.certification-arrow) {
    display: none;
  }
  .certification-link.no-link:hover :global(.certification-arrow) {
    @apply opacity-0 translate-x-[-0.5rem] !important;
  }
</style>