---
// 1. Importamos utilidades y datos bilingÃ¼es
import { useTranslations } from '../../i18n/utils';
import allEducation from '../../data/education.js';

// 2. Obtenemos idioma y 't'
const { currentLocale } = Astro;
const lang = currentLocale as 'es' | 'en';
const t = useTranslations(lang);

// 3. Seleccionamos el array de datos correcto
//    (Usamos 'as any' para evitar el error de TypeScript si persiste)
const educationHistory = (allEducation as any)[lang] || (allEducation as any).es;
---
<section id="education" class="section-spacing">
  <div class="max-w-5xl mx-auto px-8">
    
    <h2 class="section-title text-slate-900 dark:text-slate-100">
      <span class="icon-emoji">ðŸŽ“</span>
      {/* 4. Traducimos el tÃ­tulo */}
      {t('education.title')}
    </h2>

    <!-- Contenedor del Timeline -->
    <div class="education-timeline">
      {/* 5. Comprobamos si educationHistory es un array antes de mapear */}
      {educationHistory && Array.isArray(educationHistory) && educationHistory.map(edu => (
        <div class="timeline-item">
          <div class="timeline-dot"></div>
          <div class="timeline-content">
            <span class="timeline-dates">{edu.dates}</span>
            <h3 class="timeline-degree">{edu.degree}</h3>
            <p class="timeline-university">{edu.university}</p>
            <p class="timeline-status">{edu.status}</p>
            {/* Comprobamos si la descripciÃ³n existe antes de mostrarla */}
            {edu.description && (
              <p class="timeline-description">{edu.description}</p>
            )}
          </div>
        </div>
      ))}
    </div>

  </div>
</section>

